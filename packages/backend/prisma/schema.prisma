// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Notification preferences
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  taskAssignments    Boolean @default(true)
  projectUpdates     Boolean @default(true)
  mentions           Boolean @default(true)

  // Relations
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  createdTasks     Task[]          @relation("TaskCreator")
  assignedTasks    Task[]          @relation("TaskAssignee")
  messages         Message[]
  notifications    Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Project settings
  isPublic           Boolean @default(false)
  allowMemberInvites Boolean @default(true)

  // Relations
  owner    User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  ProjectMember[]
  tasks    Task[]
  messages Message[]

  @@map("projects")
}

model ProjectMember {
  id       String            @id @default(uuid())
  userId   String
  projectId String
  role     ProjectMemberRole @default(MEMBER)
  joinedAt DateTime          @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  projectId   String
  assigneeId  String?
  creatorId   String
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator  User    @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  projectId String
  authorId  String
  parentId  String?
  mentions  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  editedAt  DateTime?

  // Relations
  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Message? @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Message[] @relation("MessageReplies")

  @@map("messages")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json             @default("{}")
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum ProjectMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE
  MENTION
  PROJECT_UPDATE
}
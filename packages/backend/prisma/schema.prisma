generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String            @unique
  passwordHash     String            @map("password_hash")
  fullName         String?           @map("full_name")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  preferences      Json?             @default("{}")
  activityLogs     ActivityLog[]
  attachments      Attachment[]
  messages         Message[]
  notifications    Notification[]
  projectMembers   ProjectMember[]
  projectTemplates ProjectTemplate[] @relation("ProjectTemplateOwner")
  ownedProjects    Project[]         @relation("ProjectOwner")
  taskAssignments  TaskAssignment[]
  createdTasks     Task[]            @relation("TaskCreator")
  timeEntries      TimeEntry[]
  userSessions     UserSession[]

  @@index([email], map: "idx_users_email")
  @@index([preferences], map: "idx_users_preferences_gin", type: Gin)
  @@map("users")
}

model UserSession {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  refreshToken String   @unique @map("refresh_token")
  userAgent    String?  @map("user_agent")
  ip           String?  @db.Inet
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt    DateTime @map("expires_at") @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_sessions")
}

model Project {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ownerId       String?         @map("owner_id") @db.Uuid
  name          String
  slug          String          @unique
  description   String?
  status        String          @default("active")
  metadata      Json?           @default("{}")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  attachments   Attachment[]
  messages      Message[]
  notifications Notification[]
  members       ProjectMember[]
  owner         User?           @relation("ProjectOwner", fields: [ownerId], references: [id], onUpdate: NoAction)
  tasks         Task[]

  @@index([metadata], map: "idx_projects_metadata_gin", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_projects_name_trgm", type: Gin)
  @@index([ownerId], map: "idx_projects_owner")
  @@map("projects")
}

model ProjectTemplate {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  ownerId     String?  @map("owner_id") @db.Uuid
  settings    Json?    @default("{}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  owner       User?    @relation("ProjectTemplateOwner", fields: [ownerId], references: [id], onUpdate: NoAction)

  @@map("project_templates")
}

model ProjectMember {
  projectId String   @map("project_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String   @default("member")
  joinedAt  DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([projectId, userId])
  @@index([userId], map: "idx_projmem_user")
  @@map("project_members")
}

model Task {
  id              String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  projectId       String                   @map("project_id") @db.Uuid
  creatorId       String?                  @map("creator_id") @db.Uuid
  title           String
  description     String?
  status          String                   @default("todo")
  priority        Int?                     @default(3) @db.SmallInt
  estimateMinutes Int?                     @map("estimate_minutes")
  dueDate         DateTime?                @map("due_date") @db.Date
  createdAt       DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  searchVector    Unsupported("tsvector")? @map("search_vector")
  attachments     Attachment[]
  messages        Message[]
  assignments     TaskAssignment[]
  dependents      TaskDependency[]         @relation("TaskDependents")
  dependencies    TaskDependency[]         @relation("TaskDependencies")
  creator         User?                    @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project         Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  timeEntries     TimeEntry[]

  @@index([priority], map: "idx_task_priority")
  @@index([projectId, status, dueDate], map: "idx_tasks_proj_status_due")
  @@index([searchVector], map: "idx_tasks_search_gin", type: Gin)
  @@map("tasks")
}

model TaskAssignment {
  taskId     String   @map("task_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamptz(6)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([taskId, userId])
  @@index([userId], map: "idx_task_assign_user")
  @@map("task_assignments")
}

model TaskDependency {
  taskId          String @map("task_id") @db.Uuid
  dependsOnTaskId String @map("depends_on_task_id") @db.Uuid
  dependsOnTask   Task   @relation("TaskDependents", fields: [dependsOnTaskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  task            Task   @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([taskId, dependsOnTaskId], map: "task_dep_unique")
  @@map("task_dependencies")
}

model Message {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  projectId   String       @map("project_id") @db.Uuid
  taskId      String?      @map("task_id") @db.Uuid
  authorId    String?      @map("author_id") @db.Uuid
  parentId    String?      @map("parent_id") @db.Uuid
  body        String
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  attachments Attachment[]
  author      User?        @relation(fields: [authorId], references: [id], onUpdate: NoAction)
  parent      Message?     @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies     Message[]    @relation("MessageReplies")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  task        Task?        @relation(fields: [taskId], references: [id], onUpdate: NoAction)

  @@map("messages")
}

model Attachment {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ownerId     String?  @map("owner_id") @db.Uuid
  projectId   String?  @map("project_id") @db.Uuid
  taskId      String?  @map("task_id") @db.Uuid
  messageId   String?  @map("message_id") @db.Uuid
  storagePath String   @map("storage_path")
  filename    String?
  mimeType    String?  @map("mime_type")
  sizeBytes   BigInt?  @map("size_bytes")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  message     Message? @relation(fields: [messageId], references: [id], onUpdate: NoAction)
  owner       User?    @relation(fields: [ownerId], references: [id], onUpdate: NoAction)
  project     Project? @relation(fields: [projectId], references: [id], onUpdate: NoAction)
  task        Task?    @relation(fields: [taskId], references: [id], onUpdate: NoAction)

  @@index([projectId], map: "idx_attachments_proj")
  @@map("attachments")
}

model Notification {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  projectId  String?  @map("project_id") @db.Uuid
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id") @db.Uuid
  payload    Json?    @default("{}")
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notifications")
}

model TimeEntry {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  taskId          String?   @map("task_id") @db.Uuid
  startTime       DateTime  @map("start_time") @db.Timestamptz(6)
  endTime         DateTime? @map("end_time") @db.Timestamptz(6)
  durationSeconds Int?      @map("duration_seconds")
  metadata        Json?     @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  task            Task?     @relation(fields: [taskId], references: [id], onUpdate: NoAction)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, startTime], map: "idx_timeentries_user_start")
  @@map("time_entries")
}

model ActivityLog {
  id         BigInt   @id @default(autoincrement())
  actorId    String?  @map("actor_id") @db.Uuid
  entityType String   @map("entity_type")
  entityId   String?  @map("entity_id") @db.Uuid
  action     String
  before     Json?
  after      Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  actor      User?    @relation(fields: [actorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([entityType, entityId], map: "idx_activity_entity")
  @@map("activity_log")
}

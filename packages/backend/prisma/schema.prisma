// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  fullName     String?  @map("full_name")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  preferences  Json     @default("{}")

  // Relations
  ownedProjects      Project[]         @relation("ProjectOwner")
  projectTemplates   ProjectTemplate[] @relation("ProjectTemplateOwner")
  projectMembers     ProjectMember[]
  createdTasks       Task[]            @relation("TaskCreator")
  taskAssignments    TaskAssignment[]
  messages           Message[]
  notifications      Notification[]
  attachments        Attachment[]
  timeEntries        TimeEntry[]
  userSessions       UserSession[]
  activityLogs       ActivityLog[]

  @@map("users")
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  userAgent    String?  @map("user_agent")
  ip           String?  // inet type in PostgreSQL
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Project {
  id          String   @id @default(uuid())
  ownerId     String?  @map("owner_id")
  name        String
  slug        String   @unique
  description String?
  status      String   @default("active") // active, archived, deleted
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  owner        User?            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  members      ProjectMember[]
  tasks        Task[]
  messages     Message[]
  attachments  Attachment[]
  notifications Notification[]

  @@map("projects")
}

model ProjectTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String?  @map("owner_id")
  settings    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  owner User? @relation("ProjectTemplateOwner", fields: [ownerId], references: [id], onDelete: SetNull)

  @@map("project_templates")
}

model ProjectMember {
  projectId String @map("project_id")
  userId    String @map("user_id")
  role      String @default("member") // owner, admin, member, viewer
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_members")
}

model Task {
  id              String   @id @default(uuid())
  projectId       String   @map("project_id")
  creatorId       String?  @map("creator_id")
  title           String
  description     String?
  status          String   @default("todo") // todo, in_progress, done, blocked
  priority        Int      @default(3) // 1-5 scale
  estimateMinutes Int?     @map("estimate_minutes")
  dueDate         DateTime? @map("due_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  searchVector    String?  @map("search_vector") // tsvector type

  // Relations
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator       User?             @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  assignments   TaskAssignment[]
  dependencies  TaskDependency[]  @relation("TaskDependencies")
  dependents    TaskDependency[]  @relation("TaskDependents")
  attachments   Attachment[]
  timeEntries   TimeEntry[]
  messages      Message[]

  @@map("tasks")
}

model TaskAssignment {
  taskId     String   @map("task_id")
  userId     String   @map("user_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@map("task_assignments")
}

model TaskDependency {
  taskId            String @map("task_id")
  dependsOnTaskId   String @map("depends_on_task_id")

  // Relations
  task          Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask Task @relation("TaskDependents", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@id([taskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model Message {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  taskId    String?  @map("task_id")
  authorId  String?  @map("author_id")
  parentId  String?  @map("parent_id")
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?        @relation(fields: [taskId], references: [id], onDelete: SetNull)
  author      User?        @relation(fields: [authorId], references: [id], onDelete: SetNull)
  parent      Message?     @relation("MessageReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Message[]    @relation("MessageReplies")
  attachments Attachment[]

  @@map("messages")
}

model Attachment {
  id          String   @id @default(uuid())
  ownerId     String?  @map("owner_id")
  projectId   String?  @map("project_id")
  taskId      String?  @map("task_id")
  messageId   String?  @map("message_id")
  storagePath String   @map("storage_path")
  filename    String?
  mimeType    String?  @map("mime_type")
  sizeBytes   BigInt?  @map("size_bytes")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  owner   User?     @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  project Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task    Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  message Message?  @relation(fields: [messageId], references: [id], onDelete: SetNull)

  @@map("attachments")
}

model Notification {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  projectId  String?  @map("project_id")
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  payload    Json     @default("{}")
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TimeEntry {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  taskId         String?   @map("task_id")
  startTime      DateTime  @map("start_time")
  endTime        DateTime? @map("end_time")
  durationSeconds Int?     @map("duration_seconds")
  metadata       Json      @default("{}")
  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("time_entries")
}

model ActivityLog {
  id         BigInt   @id @default(autoincrement())
  actorId    String?  @map("actor_id")
  entityType String   @map("entity_type")
  entityId   String?  @map("entity_id")
  action     String
  before     Json?
  after      Json?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@map("activity_log")
}

// Note: The original schema uses string fields for status/role values instead of enums
// This matches the PostgreSQL schema which uses CHECK constraints for validation
// The valid values are:
// - Project status: 'active', 'archived', 'deleted'
// - Project member roles: 'owner', 'admin', 'member', 'viewer'  
// - Task status: 'todo', 'in_progress', 'done', 'blocked'
// - Task priority: 1-5 (integer scale)
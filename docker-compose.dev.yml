version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: synergy-sphere-postgres
    environment:
      POSTGRES_DB: synergy_sphere_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - synergy-sphere-network

  redis:
    image: redis:7-alpine
    container_name: synergy-sphere-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - synergy-sphere-network

  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile.dev
    container_name: synergy-sphere-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/synergy_sphere_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_REFRESH_SECRET: dev-refresh-secret-change-in-production
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./packages/backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - synergy-sphere-network
    command: npm run dev

  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.dev
    container_name: synergy-sphere-frontend
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_WS_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./packages/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - synergy-sphere-network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  synergy-sphere-network:
    driver: bridge